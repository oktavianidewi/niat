# this is EDA (Explanatory Data Analaysis between posts cluster and its related features)
import load_all_dataset as ld
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
import warnings
warnings.filterwarnings('ignore')
from scipy import stats


# LOAD THE DATASET
# all dataset
all_df = ld.all_post()
post_cluster_df = ld.post_cluster_result()
# merge with post clustered result
all_df_clustered = pd.merge(all_df, post_cluster_df, on='postId', how='inner')
all_df_clustered = all_df_clustered[['postId', 'LikesCount', 'SharesCount', 'CommentsCount', 'PostTextLength', 'PostTextSubjectivity', 'PostTextPolarity', 'resultCluster']]
all_df_clustered['Interactions'] = all_df_clustered['LikesCount']+all_df_clustered['SharesCount']+all_df_clustered['CommentsCount']
all_df_clustered['resultCluster'] =all_df_clustered['resultCluster'].astype('category',ordered=False)
print all_df_clustered.head(10)
print all_df_clustered.dtypes
print all_df_clustered.describe()

# histogram
# all_df_clustered['PostTextPolarity'].hist(bins=50)

# print pd.crosstab(all_df_clustered['PostTextPolarity'], all_df_clustered['Interactions'], margins=True)
all_df_clustered.boxplot(column="Interactions", by="PostTextPolarity")
plt.show()

"""
all_df_clustered.boxplot(column='PostTextPolarity')
plt.show()
"""

quit()
# CORRELATION BETWEEN VARIABLES
# textpolarity dengan num of comments, sama2 score
sns.jointplot(x="PostTextPolarity", y="PostTextLength", data=all_df_clustered, kind = 'reg', size = 5)
plt.show()

# resultCluster dan LikesCount
# Calculate the correlation coefficient
r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['LikesCount'])
print ('point biserial correlation r is %s with p = %s' %(r,p))
"""
fig, ax = plt.subplots(figsize=(12,4))
sns.boxplot(y = 'resultCluster', x = 'LikesCount', data = all_df_clustered, width = 0.8,orient = 'h', showmeans = True, fliersize = 3, ax = ax)
plt.show()
"""

# resultCluster dan SharesCount
r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['SharesCount'])
print ('point biserial correlation r is %s with p = %s' %(r,p))

r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['CommentsCount'])
print ('point biserial correlation r is %s with p = %s' %(r,p))

r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['PostTextLength'])
print ('point biserial correlation r is %s with p = %s' %(r,p))

r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['PostTextSubjectivity'])
print ('point biserial correlation r is %s with p = %s' %(r,p))

r, p = stats.pointbiserialr(all_df_clustered['resultCluster'], all_df_clustered['PostTextPolarity'])
print ('point biserial correlation r is %s with p = %s' %(r,p))

# spearmans
r, p = stats.spearmanr(all_df_clustered['LikesCount'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and LikesCount is %s with p = %s' %(r,p))

r, p = stats.spearmanr(all_df_clustered['SharesCount'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and SharesCount is %s with p = %s' %(r,p))

r, p = stats.spearmanr(all_df_clustered['CommentsCount'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and CommentsCount is %s with p = %s' %(r,p))

r, p = stats.spearmanr(all_df_clustered['PostTextLength'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and PostTextLength is %s with p = %s' %(r,p))

r, p = stats.spearmanr(all_df_clustered['PostTextSubjectivity'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and PostTextSubjectivity is %s with p = %s' %(r,p))

r, p = stats.spearmanr(all_df_clustered['PostTextPolarity'], all_df_clustered['resultCluster'])
print ('spearman correlation r between resultCluster and PostTextPolarity is %s with p = %s' %(r,p))